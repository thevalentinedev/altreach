"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/twitter/generate-comments/route";
exports.ids = ["app/api/twitter/generate-comments/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute&page=%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute.ts&appDir=%2Fhome%2Fvalentinedev%2FDownloads%2Faltreach-session%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fvalentinedev%2FDownloads%2Faltreach-session&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute&page=%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute.ts&appDir=%2Fhome%2Fvalentinedev%2FDownloads%2Faltreach-session%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fvalentinedev%2FDownloads%2Faltreach-session&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_valentinedev_Downloads_altreach_session_app_api_twitter_generate_comments_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/twitter/generate-comments/route.ts */ \"(rsc)/./app/api/twitter/generate-comments/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/twitter/generate-comments/route\",\n        pathname: \"/api/twitter/generate-comments\",\n        filename: \"route\",\n        bundlePath: \"app/api/twitter/generate-comments/route\"\n    },\n    resolvedPagePath: \"/home/valentinedev/Downloads/altreach-session/app/api/twitter/generate-comments/route.ts\",\n    nextConfigOutput,\n    userland: _home_valentinedev_Downloads_altreach_session_app_api_twitter_generate_comments_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/twitter/generate-comments/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0d2l0dGVyJTJGZ2VuZXJhdGUtY29tbWVudHMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnR3aXR0ZXIlMkZnZW5lcmF0ZS1jb21tZW50cyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnR3aXR0ZXIlMkZnZW5lcmF0ZS1jb21tZW50cyUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGdmFsZW50aW5lZGV2JTJGRG93bmxvYWRzJTJGYWx0cmVhY2gtc2Vzc2lvbiUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGaG9tZSUyRnZhbGVudGluZWRldiUyRkRvd25sb2FkcyUyRmFsdHJlYWNoLXNlc3Npb24maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3dDO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8/MTZmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvaG9tZS92YWxlbnRpbmVkZXYvRG93bmxvYWRzL2FsdHJlYWNoLXNlc3Npb24vYXBwL2FwaS90d2l0dGVyL2dlbmVyYXRlLWNvbW1lbnRzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90d2l0dGVyL2dlbmVyYXRlLWNvbW1lbnRzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdHdpdHRlci9nZW5lcmF0ZS1jb21tZW50c1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdHdpdHRlci9nZW5lcmF0ZS1jb21tZW50cy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9ob21lL3ZhbGVudGluZWRldi9Eb3dubG9hZHMvYWx0cmVhY2gtc2Vzc2lvbi9hcHAvYXBpL3R3aXR0ZXIvZ2VuZXJhdGUtY29tbWVudHMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3R3aXR0ZXIvZ2VuZXJhdGUtY29tbWVudHMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute&page=%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute.ts&appDir=%2Fhome%2Fvalentinedev%2FDownloads%2Faltreach-session%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fvalentinedev%2FDownloads%2Faltreach-session&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/twitter/generate-comments/route.ts":
/*!****************************************************!*\
  !*** ./app/api/twitter/generate-comments/route.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\n\n// Initialize OpenAI client\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n// In-memory rate limiter\nconst rateLimitMap = new Map();\nconst RATE_LIMIT_WINDOW = 3000 // 3 seconds in milliseconds\n;\n// Helper function to get client identifier (IP address)\nfunction getClientId(request) {\n    const forwarded = request.headers.get(\"x-forwarded-for\");\n    const realIp = request.headers.get(\"x-real-ip\");\n    const cfConnectingIp = request.headers.get(\"cf-connecting-ip\");\n    const clientIp = forwarded?.split(\",\")[0] || realIp || cfConnectingIp || \"unknown\";\n    return clientIp.trim();\n}\n// Rate limiting function\nfunction checkRateLimit(clientId) {\n    const now = Date.now();\n    const lastRequest = rateLimitMap.get(clientId);\n    if (lastRequest) {\n        const timeSinceLastRequest = now - lastRequest;\n        if (timeSinceLastRequest < RATE_LIMIT_WINDOW) {\n            const timeRemaining = RATE_LIMIT_WINDOW - timeSinceLastRequest;\n            return {\n                allowed: false,\n                timeRemaining\n            };\n        }\n    }\n    rateLimitMap.set(clientId, now);\n    // Clean up old entries to prevent memory leaks\n    for (const [id, timestamp] of rateLimitMap.entries()){\n        if (now - timestamp > 60000) {\n            rateLimitMap.delete(id);\n        }\n    }\n    return {\n        allowed: true\n    };\n}\n// Helper function to determine the appropriate model based on content complexity\nfunction determineOptimalModel(text, isComplexRequest, hasImages = false) {\n    // Always use GPT-4o for image analysis\n    if (hasImages) {\n        console.log(\"Using GPT-4o for image analysis\");\n        return \"gpt-4o\";\n    }\n    // Default to GPT-3.5-turbo for most requests\n    let model = \"gpt-3.5-turbo-1106\";\n    // Check for complexity indicators\n    const isComplex = isComplexRequest || text.length > 500 || text.includes(\"code\") || text.includes(\"technical\") || /\\b(analyze|analyse|explain|compare|contrast)\\b/i.test(text);\n    if (isComplex) {\n        model = \"gpt-4o\" // Use more capable model for complex requests\n        ;\n        console.log(\"Using GPT-4o for complex request\");\n    } else {\n        console.log(\"Using GPT-3.5-turbo for standard request\");\n    }\n    return model;\n}\nasync function POST(request) {\n    try {\n        // Rate limiting check (keep existing code)\n        const clientId = getClientId(request);\n        const rateLimitResult = checkRateLimit(clientId);\n        if (!rateLimitResult.allowed) {\n            const secondsRemaining = Math.ceil((rateLimitResult.timeRemaining || 0) / 1000);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Please wait a moment before generating another comment. Try again in ${secondsRemaining} second${secondsRemaining !== 1 ? \"s\" : \"\"}.`,\n                rateLimited: true,\n                retryAfter: secondsRemaining\n            }, {\n                status: 429,\n                headers: {\n                    \"Retry-After\": secondsRemaining.toString()\n                }\n            });\n        }\n        const requestData = await request.json();\n        const { tweetContent, tone, length, useEmoji, variations, instructions } = requestData;\n        if (!tweetContent || !tweetContent.text) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Tweet content is required\"\n            }, {\n                status: 400\n            });\n        }\n        // Validate variations\n        const numVariations = variations || 3;\n        if (numVariations < 1 || numVariations > 5) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Number of variations must be between 1 and 5\"\n            }, {\n                status: 400\n            });\n        }\n        try {\n            // Check if we have images\n            const hasImages = tweetContent.images && tweetContent.images.length > 0;\n            // Build the system prompt\n            const systemPrompt = `You are a social media copywriter specializing in Twitter/X replies. \nGiven a tweet${hasImages ? \" with images\" : \"\"}, first analyze its content to determine the most appropriate tone for a reply, then generate ${numVariations} comment variation${numVariations > 1 ? \"s\" : \"\"} using that tone (unless a specific tone is requested).\n\n${tone ? `The requested tone is: ${tone}` : \"Determine the optimal tone based on the tweet content.\"}\n\nGuidelines:\n- ${tone ? `Use the requested ${tone} tone` : \"First determine the optimal tone, then use it consistently\"}\n- Keep replies ${length === \"shorter\" ? \"concise (under 140 characters)\" : \"more detailed (140-280 characters)\"}\n- ${useEmoji ? \"Include relevant emojis naturally\" : \"Do not use emojis\"}\n- Make each variation distinct and engaging\n- Focus on driving conversation and engagement\n- Sound authentic and human, not generic or AI-generated\n- Avoid generic phrases like \"Great post!\" or \"Thanks for sharing!\"\n- Respond directly to the content of the tweet\n${hasImages ? \"- Consider the visual content in the images when crafting your response\" : \"\"}\n\n${instructions ? `Additional instructions: ${instructions}` : \"\"}\n\nReturn your response as a JSON object with the following structure:\n{\n  \"detectedTone\": \"brief description of the detected tone (only if no tone was specified)\",\n  \"comments\": [\"First comment variation\", \"Second comment variation\", \"Third comment variation\"]\n}\n`;\n            // Create the user prompt with the tweet content\n            const userPrompt = `Tweet${tweetContent.author ? ` by ${tweetContent.author}` : \"\"}:\n\"${tweetContent.text.substring(0, 280)}${tweetContent.text.length > 280 ? \"...\" : \"\"}\"\n\n${tone ? `Generate ${numVariations} ${tone} reply variation${numVariations > 1 ? \"s\" : \"\"}.` : `Determine the best tone for replying, then generate ${numVariations} reply variation${numVariations > 1 ? \"s\" : \"\"} using that tone.`}`;\n            // Determine if this is a complex request\n            const isComplexRequest = !!instructions && (instructions.length > 100 || instructions.includes(\"technical\") || instructions.includes(\"analyze\"));\n            // Determine the optimal model\n            const modelToUse = determineOptimalModel(tweetContent.text, isComplexRequest, hasImages);\n            // Create messages array - handle images if present\n            const messages = [\n                {\n                    role: \"system\",\n                    content: systemPrompt\n                }\n            ];\n            if (hasImages && tweetContent.images) {\n                // Create vision message with images\n                const imageContent = tweetContent.images.map((imageUrl)=>({\n                        type: \"image_url\",\n                        image_url: {\n                            url: imageUrl,\n                            detail: \"low\"\n                        }\n                    }));\n                messages.push({\n                    role: \"user\",\n                    content: [\n                        {\n                            type: \"text\",\n                            text: userPrompt\n                        },\n                        ...imageContent\n                    ]\n                });\n            } else {\n                // Text-only message\n                messages.push({\n                    role: \"user\",\n                    content: userPrompt\n                });\n            }\n            // Call OpenAI API\n            const response = await openai.chat.completions.create({\n                model: modelToUse,\n                messages: messages,\n                temperature: 0.8,\n                response_format: {\n                    type: \"json_object\"\n                },\n                max_tokens: 1000\n            });\n            const content = response.choices[0].message.content;\n            if (!content) {\n                throw new Error(\"No content returned from OpenAI\");\n            }\n            // Parse the JSON response (keep existing parsing logic)\n            let comments = [];\n            let detectedTone = null;\n            try {\n                const parsedResponse = JSON.parse(content);\n                // Extract detected tone if available\n                if (parsedResponse.detectedTone && !tone) {\n                    detectedTone = parsedResponse.detectedTone;\n                }\n                // Handle different possible JSON structures\n                if (Array.isArray(parsedResponse)) {\n                    comments = parsedResponse;\n                } else if (parsedResponse.comments && Array.isArray(parsedResponse.comments)) {\n                    comments = parsedResponse.comments;\n                } else if (parsedResponse.replies && Array.isArray(parsedResponse.replies)) {\n                    comments = parsedResponse.replies;\n                } else if (parsedResponse.variations && Array.isArray(parsedResponse.variations)) {\n                    comments = parsedResponse.variations;\n                } else {\n                    // Try to extract any array property\n                    const arrayProps = Object.values(parsedResponse).filter((val)=>Array.isArray(val));\n                    if (arrayProps.length > 0 && Array.isArray(arrayProps[0])) {\n                        comments = arrayProps[0];\n                    }\n                }\n            } catch (parseError) {\n                console.error(\"Error parsing OpenAI response:\", parseError);\n                // Fallback: try to extract an array from the content\n                const arrayMatch = content.match(/\\[(.*)\\]/s);\n                if (arrayMatch && arrayMatch[1]) {\n                    try {\n                        comments = JSON.parse(`[${arrayMatch[1]}]`);\n                    } catch  {\n                        // If all parsing fails, split by newlines and clean up\n                        comments = content.split(\"\\n\").filter((line)=>line.trim().startsWith('\"') || line.trim().startsWith(\"'\")).map((line)=>line.trim().replace(/^[\"']|[\"'],?$/g, \"\"));\n                    }\n                }\n            }\n            // Ensure we have at least one comment\n            if (!comments.length) {\n                throw new Error(\"Failed to generate comments\");\n            }\n            // Format the comments\n            const formattedComments = comments.map((text, index)=>({\n                    text: text.trim().replace(/^[\"']|[\"']$/g, \"\"),\n                    isRecommended: index === 0\n                }));\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                comments: formattedComments,\n                tweetContext: tweetContent.text,\n                tone: detectedTone || tone,\n                detectedTone: detectedTone,\n                hasImages: hasImages,\n                imageCount: hasImages ? tweetContent.images?.length || 0 : 0,\n                metadata: {\n                    length,\n                    useEmoji,\n                    variations: numVariations,\n                    hasInstructions: !!instructions,\n                    modelUsed: modelToUse\n                }\n            });\n        } catch (openaiError) {\n            console.error(\"OpenAI API error:\", openaiError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to generate comments. Our AI service is experiencing issues. Please try again shortly.\"\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        console.error(\"Error generating comments:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Comment generation failed. Please try again.\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/twitter/generate-comments/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/openai"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute&page=%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftwitter%2Fgenerate-comments%2Froute.ts&appDir=%2Fhome%2Fvalentinedev%2FDownloads%2Faltreach-session%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fvalentinedev%2FDownloads%2Faltreach-session&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();